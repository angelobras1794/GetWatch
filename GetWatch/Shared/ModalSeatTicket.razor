@if (Visible)
{
    <div class="modal-overlay" id="modal">
        <div class="modal-cinema">
            <button class="close-button" @onclick="OnClose">X</button>

            <div class="date-selector">
                <span class="selected">Today</span>
            </div>

            <div class="sessions">
                <button class="session">11:00</button>
                <button class="session">12:00</button>
                <button class="session selected">13:00</button>
                <button class="session">14:00</button>
                <button class="session full">Session Full 15:00</button>
            </div>

            <h3>Selecione Os Lugares</h3>

            <div class="seat-map">
                <div class="screen">Screen</div>
                <div class="seats">
                    @for (int i = 0; i < 7; i++)
                    {
                        var row = i; // Local copy
                        <div class="row">
                            @((char)('A' + row))
                            @for (int j = 0; j < 5; j++)
                            {
                                var col = j; // Local copy
                                var seatLabel = $"{(char)('A' + row)}{col + 1}";
                                <span class="seat @seatStates[row, col]" @onclick="() => ToggleSeat(row, col)">
                                </span>
                            }
                        </div>
                    }
                </div>
                <div class="legend">
                    <span><span class="legend-dot available"></span> Available</span>
                    <span><span class="legend-dot reserved"></span> Reserved</span>
                    <span><span class="legend-dot selected"></span> Selected</span>
                </div>
            </div>

            <div class="ticket-count">
                <div>
                    Persons: 
                     @AdultsCount 
                </div>
            </div>

            <div class="total">Total: @TotalPrice.ToString("0.00") $</div>

            <div class="actions">
                <button class="add-cart" @onclick="AddToCart">Adicionar to cart</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }

    [Parameter] public double Price { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<(int Adults,  List<string> Seats)> OnAddToCart { get; set; }
    [Parameter] public EventCallback<(int Adults,  List<string> Seats)> OnCheckout { get; set; }
    
    public double TotalPrice => Price * AdultsCount;

    private int AdultsCount { get; set; } = 1;
    private string[,] seatStates = new string[7, 5]; 
    private List<string> SelectedSeats { get; set; } = new List<string>();

    protected override void OnInitialized()
    {
    
        for (int i = 0; i < 7; i++)
            for (int j = 0; j < 5; j++)
                seatStates[i, j] = "available";

        Random random = new Random();
        int row = random.Next(0, 7);
        int col = random.Next(0, 5);
        string seatLabel = $"{(char)('A' + row)}{col + 1}";
        seatStates[row, col] = "selected";
        SelectedSeats.Add(seatLabel);
    }
    private void ChangeAdults(int delta)
    {
        AdultsCount = Math.Max(1, AdultsCount + delta);
        
    }

    private void ToggleSeat(int row, int col)
{
    
    if (row < 0 || row >= seatStates.GetLength(0) || col < 0 || col >= seatStates.GetLength(1))
        return;
    string seatLabel = $"{(char)('A' + row)}{col + 1}";
    if (seatStates[row, col] == "available")
    {
        seatStates[row, col] = "selected";
        SelectedSeats.Add(seatLabel);
        ChangeAdults(1);
    }
    else if (seatStates[row, col] == "selected")
    {
        if (SelectedSeats.Count > 1)
        {
            seatStates[row, col] = "available";
            SelectedSeats.Remove(seatLabel);
            ChangeAdults(-1);
        }
    }
}

    private async Task AddToCart()
    {
        if (OnAddToCart.HasDelegate)
            await OnAddToCart.InvokeAsync((AdultsCount,  SelectedSeats));
    }

    private async Task Checkout()
    {
        if (OnCheckout.HasDelegate)
            await OnCheckout.InvokeAsync((AdultsCount,  SelectedSeats));
    }
}