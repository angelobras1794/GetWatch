@using GetWatch.Services.Db

@if (Visible)
{
    <div class="modal-overlay">
        <div class="modal">
            <button class="close-button" @onclick="OnClose">×</button>
            <h2>Select Location :</h2>

            <div class="form-group">
                <label>Cinema</label>
                <select @bind="SelectedCinema">
                    <option disabled selected value="">Select cinema</option>
                    @foreach (var cinema in Sessions.Select(s => s.CinemaName).Distinct().Where(c => !string.IsNullOrEmpty(c)))
                    {
                        <option value="@cinema">@cinema</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label>Opções</label>
                <select @bind="SelectedOption" disabled="@string.IsNullOrEmpty(SelectedCinema)">
                    <option disabled selected value="">Select an option</option>
                    @foreach (var tipo in Sessions.Where(s => s.CinemaName == SelectedCinema)
                                                 .Select(s => s.MovieType)
                                                 .Distinct()
                                                 .Where(t => !string.IsNullOrEmpty(t)))
                    {
                        <option value="@tipo">@tipo</option>
                    }
                </select>
            </div>

            <button class="submit-button" @onclick="OnSubmit" disabled="@(!CanSubmit)">Next</button>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<(string Cinema, string Option)> OnSubmitSelection { get; set; }

    [Parameter] public List<DbMovieSession> Sessions { get; set; } = new();
    private string SelectedCinema { get; set; } = "";
    private string SelectedOption { get; set; } = "";

    private bool CanSubmit => !string.IsNullOrEmpty(SelectedCinema) && !string.IsNullOrEmpty(SelectedOption);

    private async Task OnSubmit()
    {
        if (CanSubmit)
        {
            await OnSubmitSelection.InvokeAsync((SelectedCinema, SelectedOption));
        }
    }
}