// <auto-generated />
using System;
using GetWatch.Services.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GetWatch.Migrations
{
    [DbContext(typeof(GetWatchContext))]
    [Migration("20250520174304_MovieSessions")]
    partial class MovieSessions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("GetWatch.Services.Db.CartItem.DbCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CartId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("DbCartItem");

                    b.HasDiscriminator().HasValue("DbCartItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GetWatch.Services.Db.DbCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<long>("cardNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("cardOwner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("cvv")
                        .HasColumnType("INTEGER");

                    b.Property<string>("expiryDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DbCards");
                });

            modelBuilder.Entity("GetWatch.Services.Db.DbCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DbCarts");
                });

            modelBuilder.Entity("GetWatch.Services.Db.DbMovieSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AvailableSeats")
                        .HasColumnType("TEXT");

                    b.Property<string>("CinemaName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MovieType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DbMovieSessions");
                });

            modelBuilder.Entity("GetWatch.Services.Db.DbSupportTickets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DbSupportTickets");
                });

            modelBuilder.Entity("GetWatch.Services.Db.DbUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DbUsers");
                });

            modelBuilder.Entity("GetWatch.Services.Db.Purchases.DbPurchases", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DbPurchases");

                    b.HasDiscriminator().HasValue("DbPurchases");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GetWatch.Services.Db.CartItem.DbBluRayCart", b =>
                {
                    b.HasBaseType("GetWatch.Services.Db.CartItem.DbCartItem");

                    b.Property<int>("PurchaseType")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("DbBluRayCart");
                });

            modelBuilder.Entity("GetWatch.Services.Db.CartItem.DbRentItem", b =>
                {
                    b.HasBaseType("GetWatch.Services.Db.CartItem.DbCartItem");

                    b.Property<int>("PurchaseType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("TEXT");

                    b.ToTable("DbCartItem", t =>
                        {
                            t.Property("PurchaseType")
                                .HasColumnName("DbRentItem_PurchaseType");
                        });

                    b.HasDiscriminator().HasValue("DbRentItem");
                });

            modelBuilder.Entity("GetWatch.Services.Db.CartItem.DbTicketCart", b =>
                {
                    b.HasBaseType("GetWatch.Services.Db.CartItem.DbCartItem");

                    b.Property<int>("PersonAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseType")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Seats")
                        .HasColumnType("TEXT");

                    b.ToTable("DbCartItem", t =>
                        {
                            t.Property("PurchaseType")
                                .HasColumnName("DbTicketCart_PurchaseType");
                        });

                    b.HasDiscriminator().HasValue("DbTicketCart");
                });

            modelBuilder.Entity("GetWatch.Services.Db.Purchases.DbBluRayPurchase", b =>
                {
                    b.HasBaseType("GetWatch.Services.Db.Purchases.DbPurchases");

                    b.HasDiscriminator().HasValue("DbBluRayPurchase");
                });

            modelBuilder.Entity("GetWatch.Services.Db.Purchases.DbRentPurchase", b =>
                {
                    b.HasBaseType("GetWatch.Services.Db.Purchases.DbPurchases");

                    b.Property<DateTime>("RentalEndDate")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("DbRentPurchase");
                });

            modelBuilder.Entity("GetWatch.Services.Db.Purchases.DbTicketPurchase", b =>
                {
                    b.HasBaseType("GetWatch.Services.Db.Purchases.DbPurchases");

                    b.Property<int>("PersonAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseType")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Seats")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("DbTicketPurchase");
                });

            modelBuilder.Entity("GetWatch.Services.Db.CartItem.DbCartItem", b =>
                {
                    b.HasOne("GetWatch.Services.Db.DbCart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("GetWatch.Services.Db.DbCard", b =>
                {
                    b.HasOne("GetWatch.Services.Db.DbUser", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetWatch.Services.Db.DbCart", b =>
                {
                    b.HasOne("GetWatch.Services.Db.DbUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("GetWatch.Services.Db.DbCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetWatch.Services.Db.DbSupportTickets", b =>
                {
                    b.HasOne("GetWatch.Services.Db.DbUser", "User")
                        .WithMany("SupportTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetWatch.Services.Db.Purchases.DbPurchases", b =>
                {
                    b.HasOne("GetWatch.Services.Db.DbUser", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetWatch.Services.Db.DbCart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("GetWatch.Services.Db.DbUser", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("SupportTickets");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
