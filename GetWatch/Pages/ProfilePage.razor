@page "/Profile" 
@attribute [Authorize]
@using GetWatch.Pages.Layout
@layout ProfilePageLayout
@using GetWatch.Services.Db
@using GetWatch.Services
@using System.Security.Claims
@using GetWatch.Services.Movies
@using GetWatch.Services.Movies.Strategy
@using GetWatch.Services.ShoppingCart;
@using GetWatch.Interfaces.Movies
@using GetWatch.Interfaces.User;
@using GetWatch.Interfaces.ShoppingCart
@using GetWatch.Interfaces.Db
@using GetWatch.Services.MovieTicket;
@using GetWatch.Interfaces.Compra;

@inject NavigationManager Nav
@inject CustomAuthenticationStateProvider AuthenticationStateProvider ;
@inject IJSRuntime JS

@inject IMovieRepository MovieRepository
@inject IUnitOfWork UnitOfWork
@inject IUserMapper UserMapper
@inject ICartItemFactory CartItemFactory
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject ICartItemFactory CartItemFactory

<NavBar/>
    @if (realUser == null)
    {
        <div class="loading-container">
            <p>Loading...</p>
        </div>
    }
    else
    {
        <div class="profile-container">
                <div class="user-info">
                    
                    <div class="image-container">
                        <img src="/images/poster.jpg" alt="User Image" class="user-image">
                    </div>
                    <div class="userInfo-container">
                        <p class="user-name">@realUser.Name</p>
                        <p class="user-email">@realUser.Email</p>

                    </div>
                <div class="logout-container">
                    <button class="logout-button" @onclick="Logout">Logout</button>
                </div>
                </div>
                <div class="other-user-info">
                    <div class="userInfo-container">
                        <p class="user-name">Genero</p>
                        <p class="user-email">M</p>

                    </div>
                    <div class="userInfo-container">
                        <p class="user-name">Pais</p>
                        <p class="user-email">Portugal</p>

                    </div>
                    <div class="userInfo-container">
                        <p class="user-name">Linguagem</p>
                        <p class="user-email">Portugues-BR</p>

                    </div>

                </div>
                
                <div class="other-info">
                    <div class="section-container">
                        <ul class="section-menu">
                            <li class="menu-item active">Transactions</li>
                            <li class="menu-item">Tickets in effect</li>
                            <li class="menu-item">Support</li>
                        </ul>

                    </div>
                    <div class="info-container">
                        <div class="info-item active" id="transactions">
                            
                            @foreach (var item in realUser.Transactions)
                            {
                                @if(item is not MovieTicketProduct){
                                    var movie = transactionsMovies.FirstOrDefault(m => m.Id == item.movieId);
                                    {
                                        <div class="transaction-item">
                                            <img src="https://image.tmdb.org/t/p/w500/@movie.PosterPath" alt="Movie Poster" class="movie-transaction-image">
                                            <div class="transaction-details">
                                                <p class="transaction-title">@movie.Title</p>
                                                <p class="transaction-quantity">Quantity: @item.Quantity</p>
                                                <p class="transaction-price">Price: @item.Price </p>
                                            </div>
                                            
                                        </div>
                                    }

                                }
                                    
                            }
                            
                        </div>
                        <div class="info-item" id="tickets">
                            @foreach (var item in realUser.Transactions)
                            {
                                @if(item is MovieTicketProduct movieTicket){
                                    var movie = transactionsMovies.FirstOrDefault(m => m.Id == item.movieId);
                                    {
                                        <div class="transaction-item">
                                            <img src="https://image.tmdb.org/t/p/w500/@movie.PosterPath" alt="Movie Poster" class="movie-transaction-image">
                                            <div class="transaction-details">
                                                <p class="transaction-title">@movie.Title</p>
                                                <p class="transaction-quantity">Seats: @movieTicket.getSeats()</p>
                                                <p class="transaction-price">Price: @item.Price </p>
                                            </div>
                                            
                                        </div>
                                    }

                                }
                                    
                            }
                        </div>
                        <div class="info-item" id="suporttickets">
                            @foreach(var ticket in realUser.SupportTickets){
                                <div class="transaction-item">
                                    <div class="transaction-details">
                                        <p class="transaction-title">@ticket.Subject</p>
                                        <p class="transaction-quantity">Status: @ticket.IsResolved</p>
                                    </div>
                                    
                                </div>
                                }
                            
                        </div>        
                    </div>
                </div>
            </div>
            }
    <Footer/>

@code {
    private IUser? realUser = null;
    private List<PopularApiMovie> transactionsMovies = new List<PopularApiMovie>();
    private List<PopularApiMovie> ticketsMovies = new List<PopularApiMovie>();

    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetAuthenticatedUserAsync();
        if (user != null)
        {
            realUser = UserMapper.Get(user.Id)!;
            getTransactionsMovies();
            
        }
        else{
            realUser = null;
        }
        
    }

        public async Task<PopularApiMovie> getMovie(int id){
        try
        {
            var httpclient = new HttpClient();
            var MovieIdStrategy = new MovieByIdFetchStrategy(id);
            var movieFetcher = new SingleMovieFetcher(MovieIdStrategy);
            var movie = await movieFetcher.FetchMovieAsync(httpclient);
            if (movie != null)
            {
               return movie; 
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching movie: {ex.Message}");
        }
        return null;

    }
    
    private async Task getTransactionsMovies()
    {
        foreach(var transaction in realUser.Transactions)
        {
                var movie = await getMovie(transaction.movieId);
                if (movie != null)
                    transactionsMovies.Add(movie);
            
        }
    
    }
    private async void Logout()
    {
        await AuthenticationStateProvider.NotifyUserLogout();
        Nav.NavigateTo("/login", true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
           await JS.InvokeVoidAsync("menuItensInit");
        
    }
}