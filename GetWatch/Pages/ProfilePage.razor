@page "/Profile" 
@attribute [Authorize]
@using GetWatch.Pages.Layout
@layout ProfilePageLayout
@using GetWatch.Services.Db
@using GetWatch.Services
@using System.Security.Claims
@using GetWatch.Services.Movies
@using GetWatch.Services.Movies.Strategy
@using GetWatch.Services.ShoppingCart;
@using GetWatch.Interfaces.Movies
@using GetWatch.Interfaces.User;
@using GetWatch.Interfaces.ShoppingCart
@using GetWatch.Interfaces.Db
@using GetWatch.Services.MovieTicket;
@using GetWatch.Interfaces.Compra;

@inject NavigationManager Nav
@inject CustomAuthenticationStateProvider AuthenticationStateProvider ;
@inject IJSRuntime JS

@inject IMovieRepository MovieRepository
@inject IUnitOfWork UnitOfWork
@inject IUserMapper UserMapper
@inject ICartItemFactory CartItemFactory
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject ICartItemFactory CartItemFactory

<NavBar/>
    @if (realUser == null)
    {
        <div class="loading-container">
            <p>Loading...</p>
        </div>
    }
    else if (realUser.IsAdmin == true)
    {
        <div class="profile-container">
                <div class="user-info">
                    
                    <div class="image-container">
                        <img src="/images/poster.jpg" alt="User Image" class="user-image">
                    </div>
                    <div class="userInfo-container">
                        <p class="user-name">@realUser.Name</p>
                        <p class="user-email">@realUser.Email</p>

                    </div>
                    
                <div class="logout-container">
                    <button class="logout-button" @onclick="Logout">Logout</button>
                </div>
                </div>
                <div class="other-user-info">
                    <div class="userInfo-container">
                        <p class="user-name">Genero</p>
                        <p class="user-email">M</p>

                    </div>
                    <div class="userInfo-container">
                        <p class="user-name">Country</p>
                        <p class="user-email">Portugal</p>

                    </div>
                    <div class="userInfo-container">
                        <p class="user-name">Language</p>
                        <p class="user-email">English-US</p>

                    </div>

                </div>
                
                <div class="other-info">
                    <div class="section-container">
                        <div class="section-menu">
                            <button class="menu-item" @onclick="ShowDeleteUserForm"> Delete Users </button>
                            <button class="menu-item" @onclick="ShowCreateSessionForm" >Create Session</button>
                        </div>
                    </div>
                    <br/>
                       @if (showDeleteUserForm)
                        {                            
                            <div>                            
                            <form class="delete-user-form" @onsubmit="HandleDeleteUser">
                                <h3>Delete User</h3>
                                <input type="text" placeholder="User ID" @bind="deleteUserId" class="form-control" />
                                <button type="submit" class="button" >Delete</button>
                                <button type="button" class="button" @onclick="HideDeleteUserForm">Cancel</button>
                                @if (!string.IsNullOrEmpty(deleteUserFeedback))
                                {
                                    <p>@deleteUserFeedback</p>
                                }
                            </form>
                            </div>
                        }
                        @if (showCreateSessionForm)
                        {
                            <form class="create-session-form" @onsubmit="HandleCreateSession">
                                <h3>Create New Session</h3>
                                <input type="text" placeholder="Movie ID" @bind="newMovieId" class="form-control" required/>
                                <select @bind="newMovieType" class="form-control" placeholder="Movie Type" required>
                                    <option value="" disabled selected>Select Movie Type</option>
                                    <option value="2D">2D</option>
                                    <option value="3D">3D</option>
                                    <option value="IMAX">IMAX</option>
                                    <option value="4DX">4DX</option>
                                </select>
                                <input type="text" placeholder="Cinema Name" @bind="newCinemaName" class="form-control" required />
                                <button type="submit" class="button">Create Session</button>
                                <button type="button" class="button" @onclick="HideCreateSessionForm">Cancel</button>
                                @if (!string.IsNullOrEmpty(createSessionFeedback))
                                {
                                    <p>@createSessionFeedback</p>
                                }
                            </form>
                        }

                    </div>
                </div>
            
    }
    else
    {
        <div class="profile-container">
                <div class="user-info">
                    
                    <div class="image-container">
                        <img src="/images/poster.jpg" alt="User Image" class="user-image">
                    </div>
                    <div class="userInfo-container">
                        <p class="user-name">@realUser.Name</p>
                        <p class="user-email">@realUser.Email</p>

                    </div>
                <div class="logout-container">
                    <button class="logout-button" @onclick="Logout">Logout</button>
                </div>
                </div>
                <div class="other-user-info">
                    <div class="userInfo-container">
                        <p class="user-name">Genero</p>
                        <p class="user-email">M</p>

                    </div>
                    <div class="userInfo-container">
                        <p class="user-name">Country</p>
                        <p class="user-email">Portugal</p>

                    </div>
                    <div class="userInfo-container">
                        <p class="user-name">Language</p>
                        <p class="user-email">English-US</p>

                    </div>

                </div>
                
                <div class="other-info">
                    <div class="section-container">
                        <ul class="section-menu">
                            <li class="menu-item active">Transactions</li>
                            <li class="menu-item">Tickets in effect</li>
                            <li class="menu-item">Rentals</li>
                            <li class="menu-item">Support</li>
                        </ul>

                    </div>
                    <div class="info-container">
                        <div class="info-item active" id="transactions">
                            
                            @foreach (var item in realUser.Transactions)
                            {
                                @if(item is BluRayProduct){
                                    var movie = transactionsMovies.FirstOrDefault(m => m.Id == item.movieId);
                                    {
                                        <div class="transaction-item">
                                            <img src="https://image.tmdb.org/t/p/w500/@movie.PosterPath" alt="Movie Poster" class="movie-transaction-image">
                                            <div class="transaction-details">
                                                <p class="transaction-title">@movie.Title</p>
                                                <p class="transaction-quantity">Quantity: @item.Quantity</p>
                                                <p class="transaction-price">Price: @item.Price </p>
                                            </div>
                                            
                                        </div>
                                    }

                                }
                                    
                            }
                            
                        </div>
                        <div class="info-item" id="tickets">
                            @foreach (var item in realUser.Transactions)
                            {
                                @if(item is MovieTicketProduct movieTicket){
                                    var movie = transactionsMovies.FirstOrDefault(m => m.Id == item.movieId);
                                    {
                                        <div class="transaction-item">
                                            <img src="https://image.tmdb.org/t/p/w500/@movie.PosterPath" alt="Movie Poster" class="movie-transaction-image">
                                            <div class="transaction-details">
                                                <p class="transaction-title">@movie.Title</p>
                                                <p class="transaction-quantity">Seats: @movieTicket.getSeats()</p>
                                                <p class="transaction-price">Price: @item.Price </p>
                                            </div>
                                            
                                        </div>
                                    }

                                }
                                    
                            }
                        </div>
                        <div class="info-item" id="rentals">
                            @foreach (var item in realUser.Transactions)
                            {
                                @if(item is RentalProduct movieTicket){
                                    var movie = transactionsMovies.FirstOrDefault(m => m.Id == item.movieId);
                                    {
                                        <div class="transaction-item">
                                            <img src="https://image.tmdb.org/t/p/w500/@movie.PosterPath" alt="Movie Poster" class="movie-transaction-image">
                                            <div class="transaction-details">
                                                <p class="transaction-title">@movie.Title</p>
                                                <p class="transaction-quantity">Date :@movieTicket.RentDate</p>
                                                <p class="transaction-price">Price: @item.Price </p>
                                                @if(movieTicket.RentDate >= DateTime.UtcNow){
                                                    @if (movie?.Id != null)
                                                    {
                                                        <button class="play-button" @onclick="() => showTrailer(movie.Id!.Value)">Play</button>
                                                    }
                                        
                                                }
                                                
                                            </div>
                                            
                                        </div>
                                    }

                                }
                                    
                            }
                            
                        </div>
                        <div class="info-item" id="suporttickets">
                            @foreach(var ticket in realUser.SupportTickets){
                                <div class="transaction-item">
                                    <div class="transaction-details">
                                        <p class="transaction-title">@ticket.Subject</p>
                                        <p class="transaction-quantity">Status: @ticket.IsResolved</p>
                                    </div>
                                    
                                </div>
                                }
                            
                        </div>        
                    </div>
                </div>
            </div>
            }
            @if(showTrailerModal){
                <TrailerModal TrailerUrl="@currentTrailerUrl" OnClose="CloseTrailer" />
            }
            
            
            
            
    <Footer/>

@code {
    private IUser? realUser = null;

    private DbMovieSession movieSession ;

    private HttpClient httpclient = new HttpClient();


    private List<PopularApiMovie> transactionsMovies = new List<PopularApiMovie>();
    private List<PopularApiMovie> ticketsMovies = new List<PopularApiMovie>();

   
    private bool showDeleteUserForm = false;
    private string deleteUserId = "";
    private string deleteUserFeedback = "";

  
    private bool showCreateSessionForm = false;
    private string newMovieId = "";
    private string newMovieType = "";
    private string newCinemaName = "";
    private string createSessionFeedback = "";

    private bool showTrailerModal = false;
    
    private void ShowDeleteUserForm()
    {
        showDeleteUserForm = true;
        deleteUserFeedback = "";
        deleteUserId = "";
    }

    private void HideDeleteUserForm()
    {
        showDeleteUserForm = false;
        deleteUserFeedback = "";
        deleteUserId = "";
    }

     private void OnDeleteUser()
    {
        if(Guid.TryParse(deleteUserId, out Guid userId))
        {
            try
            {
                UserMapper.Remove(userId);
                deleteUserFeedback = "Utilizador eliminado com sucesso!";
            }
            catch(Exception ex)
            {
                deleteUserFeedback = $"Erro ao eliminar utilizador: {ex.Message}";
            }
        }
        else
        {
            deleteUserFeedback = "ID inválido.";
        }
    }

    private async Task HandleDeleteUser()
    {
        OnDeleteUser();
    }

        // Criar uma sessão
    private void ShowCreateSessionForm()
{
    showCreateSessionForm = true;
    createSessionFeedback = "";
    newMovieId = "";
    newMovieType = "";
    newCinemaName = "";
}

    private async Task HandleCreateSession()
    {
        if (!int.TryParse(newMovieId, out int movieId))
        {
            createSessionFeedback = "ID do filme inválido.";
            return;
        }

        var session = new DbMovieSession
        {
            MovieId = movieId,
            MovieType = newMovieType,
            CinemaName = newCinemaName,
            Created = DateTime.UtcNow,
            Updated = DateTime.UtcNow
        };

        try
        {
        
            var repository = UnitOfWork.GetRepository<DbMovieSession>();
            if (repository == null)
            {
                throw new InvalidOperationException("Repository for DbMovieSession is null.");
            }
            
            UnitOfWork.Begin();
            repository.Insert(session);
            UnitOfWork.SaveChanges();
            UnitOfWork.Commit();
            createSessionFeedback = "Sessão criada com sucesso!";
            showCreateSessionForm = false;
        }
        catch (Exception ex)
        {
            createSessionFeedback = $"Erro ao criar sessão: {ex.Message}";
        }
    }



    // 

    private void HideCreateSessionForm()
    {
        showCreateSessionForm = false;
        createSessionFeedback = "";
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetAuthenticatedUserAsync();
        if (user != null)
        {
            realUser = UserMapper.Get(user.Id)!;
            await getTransactionsMovies();
            
            
        }
        else{
            realUser = null;
        }

        
    }

        public async Task<PopularApiMovie> getMovie(int id){
        try
        {
            var httpclient = new HttpClient();
            var MovieIdStrategy = new MovieByIdFetchStrategy(id);
            var movieFetcher = new SingleMovieFetcher(MovieIdStrategy);
            var movie = await movieFetcher.FetchMovieAsync(httpclient);
            if (movie != null)
            {
               return movie; 
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching movie: {ex.Message}");
        }
        return null;

    }
    
    private async Task getTransactionsMovies()
    {
        foreach(var transaction in realUser.Transactions)
        {
                var movie = await getMovie(transaction.movieId);
                if (movie != null)
                    transactionsMovies.Add(movie);
            
        }
    
    }
    private async void Logout()
    {
        await AuthenticationStateProvider.NotifyUserLogout();
        Nav.NavigateTo("/login", true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
           await JS.InvokeVoidAsync("menuItensInit");
        
    }

        string? currentTrailerUrl;

    async Task ShowTrailer(int movieId)
    {
        var service = new MovieVideosService();
        var trailer = await service.GetMovieVideosAsync(movieId,httpclient);
        currentTrailerUrl = trailer;
        Console.WriteLine("Trailer URL: " + currentTrailerUrl);
    }

    void CloseTrailer()
    {
        currentTrailerUrl = null;
        showTrailerModal = false;
        StateHasChanged();
    }
    async Task showTrailer(int movieId)
    {
        await ShowTrailer(movieId);
        showTrailerModal = true;
        StateHasChanged();
    }
}