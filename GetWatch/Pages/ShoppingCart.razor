@page "/ShoppingCart"
@attribute [Authorize]
@using GetWatch.Pages.Layout
@using GetWatch.Pages
@layout ShoppingCartPageLayout
@using GetWatch.Services.ShoppingCart
@using GetWatch.Services.Db
@using System.Security.Claims
@using GetWatch.Services.Movies
@using GetWatch.Services.Movies.Strategy
@using GetWatch.Interfaces.Movies
@using GetWatch.Interfaces.User
@using GetWatch.Interfaces.ShoppingCart
@using GetWatch.Interfaces.Db
@using GetWatch.Services
@inject CustomAuthenticationStateProvider AuthenticationStateProvider ;

@inject IMovieRepository MovieRepository
@inject IUnitOfWork UnitOfWork
@inject IUserMapper UserMapper
@inject ICartItemFactory CartItemFactory
@inject UserService UserService

<NavBar />
<div class="progress-container">
    <div class="progress-bar">
        <div class="progress-completed" id="progress-completed"></div>
    </div>

    <div class="progress-steps">
        <div class="step completed" data-step="1">
            <div class="step-marker">1</div>
            <div class="step-name">Cart</div>
        </div>

        <div class="step" data-step="2">
            <div class="step-marker">2</div>
            <div class="step-name">Adresses</div>
        </div>

        <div class="step" data-step="3">
            <div class="step-marker">3</div>
            <div class="step-name">Payment</div>
        </div>

        <div class="step" data-step="4">
            <div class="step-marker">4</div>
            <div class="step-name">Confirm</div>
        </div>
    </div>
</div>

<div class="cart-container">
    @if (realUser?.Cart != null && realUser.Cart.GetItems().Any() )
    {
        @foreach (var item in realUser.Cart.GetItems())
        {
            <div class="cart-item">
                <div class="item-info">
                    <div class="item-title">@getItemType(item)</div>
                </div>
                <div class="item-quantity">
                    <button class="quantity-btn">-</button>
                    <span>@item.Quantity</span>
                    <button class="quantity-btn">+</button>
                </div>
                <div class="item-price">€@(item.Price )</div>
                <button class="remove-btn" @onclick="() => RemoveItem(item)" >Remove</button>
            </div>
            
        }
    }
    else
    {
        <div class="cart-empty">O seu carrinho está vazio.</div>
    }
    @if (realUser?.Cart != null)
    {
        <div class="cart-total">
            <span>Total</span>
            <span>@realUser.Cart.Price</span>
        </div>
    }
    

    
    

    <button class="button">Próximo Passo </button>
    <a href="/GetWatch/html/homePage.html" class="back">Voltar</a>
</div>
<Footer/>




@code{
    
    private IRepository<DbUser>? UserRepository;
    private IUser? realUser;
    private bool isAuthenticated = false;
    private Dictionary<int, string> movieTitles = new();

    protected override async Task OnInitializedAsync(){
        var user = await UserService.GetAuthenticatedUserAsync();
        Console.WriteLine($"User32323 ID: {user.Id}");
        realUser = UserMapper.Get(user.Id);
        if (realUser?.Cart != null)
        {
            var ids = realUser.Cart.GetItems().Select(i => i.movieId).Distinct();
            foreach (var id in ids)
            {
                var movie = await getMovie(id);
                movieTitles[id] = movie?.Title ?? "Unknown";
            }
        }

        
    }
    public async Task<PopularApiMovie> getMovie(int id){
            var httpclient = new HttpClient();
            var MovieIdStrategy = new MovieByIdFetchStrategy(id);
            var movieFetcher = new SingleMovieFetcher(MovieIdStrategy);
            var movie = await movieFetcher.FetchMovieAsync(httpclient);
            return movie;
        
        

    }
        public string getItemType(ICartItem item)
    {
        var title = movieTitles.TryGetValue(item.movieId, out var t) ? t : "Unknown";
        return item switch
        {
            RentalProduct => $"Rental Purchase  for {title}",
            BluRayProduct => $"Bluray Purchase for {title}",
            MovieTicketProduct => $"Ticket for {title}",
            _ => "Unknown"
        };
    }
    public Task RemoveItem(ICartItem item)
    {
        if (realUser != null)
        {
            realUser.RemoveFromCart(item);
            StateHasChanged();
        }
        return Task.CompletedTask;
    }



}