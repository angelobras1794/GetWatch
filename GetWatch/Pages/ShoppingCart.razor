@page "/ShoppingCart"
@using GetWatch.Pages.Layout
@using GetWatch.Pages
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@layout ShoppingCartPageLayout
@inject ProtectedSessionStorage SessionStorage
@using GetWatch.Services.ShoppingCart

<NavBar />
<div class="progress-container">
    <div class="progress-bar">
        <div class="progress-completed" id="progress-completed"></div>
    </div>

    <div class="progress-steps">
        <div class="step completed" data-step="1">
            <div class="step-marker">1</div>
            <div class="step-name">Cart</div>
        </div>

        <div class="step" data-step="2">
            <div class="step-marker">2</div>
            <div class="step-name">Adresses</div>
        </div>

        <div class="step" data-step="3">
            <div class="step-marker">3</div>
            <div class="step-name">Payment</div>
        </div>

        <div class="step" data-step="4">
            <div class="step-marker">4</div>
            <div class="step-name">Confirm</div>
        </div>
    </div>
</div>

<div class="cart-container">
    @foreach (var item in cartItems)
    {
    <div class="cart-item">
        <div class="item-info">
            <div class="item-title">@item.movieId</div>
            @* <div class="item-action">@item.Action</div> *@
        </div>
        <div class="item-quantity">
            <button class="quantity-btn" @onclick="@(() => Decrease(item))">-</button>
            <span>@item.Quantity</span>
            <button class="quantity-btn" @onclick="@(() => Increase(item))">+</button>
        </div>
        <div class="item-price">€@((item.Price * item.Quantity).ToString("0.00"))</div>
        <button class="remove-btn" @onclick="@(() => Remove(item))">Remove</button>
    </div>
    }

    
    <div class="cart-total">
    <span>Total</span>
    <span>€@Total.ToString("0.00")</span>
    </div>

    <button class="button">Próximo Passo </button>
    <a href="/GetWatch/html/homePage.html" class="back">Voltar</a>
</div>
<Footer/>




@code{
    [Inject]
    private IShoppingCart ShoppingCarts { get; set; }

    protected override void OnInitialized()
    {
        // Ensure cart items are added or fetched

        ShoppingCarts.AddItem(new Product(10,323523, new Guid()));

    }

    public List<ICartItem> cartItems => ShoppingCarts.GetItems();
    public void Increase(ICartItem item) => ShoppingCarts.IncreaseQuantity(item);
    public void Decrease(ICartItem item) => ShoppingCarts.DecreaseQuantity(item);
    public void Remove(ICartItem item) => ShoppingCarts.RemoveItem(item);
    public double Total => ShoppingCarts.Price;
}