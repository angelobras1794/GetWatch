@page "/ShoppingCart"
@attribute [Authorize]
@using GetWatch.Pages.Layout
@using GetWatch.Pages
@layout ShoppingCartPageLayout
@using GetWatch.Services.ShoppingCart
@using GetWatch.Services.Db
@using System.Security.Claims
@using GetWatch.Services.Movies
@using GetWatch.Services.Movies.Strategy
@using GetWatch.Interfaces.Movies
@using GetWatch.Interfaces.User
@using GetWatch.Interfaces.ShoppingCart
@using GetWatch.Interfaces.Db
@using GetWatch.Services
@using GetWatch.Services.Proxy
@using GetWatch.Interfaces.Proxy
@using GetWatch.Interfaces.Compra
@using GetWatch.Interfaces.Mediator
@inject CustomAuthenticationStateProvider AuthenticationStateProvider ;
@inject IMovieRepository MovieRepository
@inject IUnitOfWork UnitOfWork
@inject IUserMapper UserMapper
@inject ICartItemFactory CartItemFactory
@inject UserService UserService
@inject IShoppingCartMapper ShoppingCartMapper
@inject ICommandManager CommandManager
@inject IGetWatchMediator GetWatchMediator
@inject ICartItemMapper CartItemMapper


<NavBar />
<div class="progress-container">
    <div class="progress-bar">
        <div class="progress-completed" id="progress-completed"></div>
    </div>

    <div class="progress-steps">
        <div class="step completed" data-step="1">
            <div class="step-marker">1</div>
            <div class="step-name">Cart</div>
        </div>

        <div class="step" data-step="2">
            <div class="step-marker">2</div>
            <div class="step-name">Adresses</div>
        </div>

        <div class="step" data-step="3">
            <div class="step-marker">3</div>
            <div class="step-name">Payment</div>
        </div>

        <div class="step" data-step="4">
            <div class="step-marker">4</div>
            <div class="step-name">Confirm</div>
        </div>
    </div>
</div>

<div class="cart-container">
    @if (realUser?.Cart != null && realUser.Cart.GetItems().Any() )
    {
        @foreach (var item in realUser.Cart.GetItems())
        {
            <div class="cart-item">
                <div class="item-info">
                    <div class="item-title">@getItemType(item)</div>
                </div>
                <div class="item-quantity">
                    <button class="quantity-btn" @onclick="() => removeQuantity(item)">-</button>
                    <span>@item.Quantity</span>
                    <button class="quantity-btn" @onclick="() => addQuantity(item)">+</button>
                </div>
                <div class="item-price">€@(item.Price )</div>
                <button class="remove-btn" @onclick="() => RemoveItem(item)" >Remove</button>
            </div>
            
        }
    }
    else
    {
        <div class="cart-empty">O seu carrinho está vazio.</div>
    }
    @if (realUser?.Cart != null)
    {
        <div class="cart-total">
            <span>Total</span>
            <span>@realUser.Cart.Price</span>
        </div>
        <div class="div-container">
            <button disabled="@UndoDisabled" class="round-button grey-button" @onclick="Undo">Undo</button>
            <button disabled="@RedoDisabled" class="round-button grey-button" @onclick="Redo">Redo</button>
        </div>
    }

    <button class="button">Próximo Passo </button>
    <a href="/" class="button">Voltar</a>
</div>
<Footer/>




@code{
    
    private IRepository<DbUser>? UserRepository;
    private IUser? realUser;
    private bool isAuthenticated = false;
    private Dictionary<int, string> movieTitles = new();

    private ProxyCart ?cartItemList;

    protected override async Task OnInitializedAsync(){
        var user = await UserService.GetAuthenticatedUserAsync();

        realUser = UserMapper.Get(user.Id);
        if (realUser?.Cart != null)
        {
            var ids = realUser.Cart.GetItems().Select(i => i.movieId).Distinct();
            foreach (var id in ids)
            {
                var movie = await getMovie(id);
                movieTitles[id] = movie?.Title ?? "Unknown";
            }
        }
        cartItemList = new ProxyCart(realUser.Cart,CartItemMapper,ShoppingCartMapper);
    }
    public async Task<PopularApiMovie> getMovie(int id){
            var httpclient = new HttpClient();
            var MovieIdStrategy = new MovieByIdFetchStrategy(id);
            var movieFetcher = new SingleMovieFetcher(MovieIdStrategy);
            var movie = await movieFetcher.FetchMovieAsync(httpclient);
            return movie;
        
        

    }
        public string getItemType(ICartItem item)
    {
        var title = movieTitles.TryGetValue(item.movieId, out var t) ? t : "Unknown";
        return item switch
        {
            RentalProduct => $"Rental Purchase  to {title}",
            BluRayProduct => $"Bluray Purchase to {title}",
            MovieTicketProduct mtp => $"Ticket for {mtp.getPersonAmount()} with seats {string.Join(", ", mtp.getSeats() ?? Array.Empty<string>())} to {title}",
            _ => "Unknown"
        };
    }
    public Task RemoveItem(ICartItem item)
    {
        GetWatchMediator.RemoveFromCart(item,realUser.Cart);
        StateHasChanged();
        return Task.CompletedTask;
    }

    void Redo()
    {
        CommandManager.Redo();
        StateHasChanged();
    }
    void Undo()
    {
        CommandManager.Undo();
        StateHasChanged();
    }

    public bool UndoDisabled => !CommandManager.HasUndo;
    public bool RedoDisabled => !CommandManager.HasRedo;

    public Task addQuantity(ICartItem item)
    {
        item.Quantity++;
        cartItemList.UpdateItem(item);
        StateHasChanged();
        return Task.CompletedTask;
    }
    public Task removeQuantity(ICartItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            cartItemList.UpdateItem(item);
        }
        else
        {
            GetWatchMediator.RemoveFromCart(item,realUser.Cart);
        }
        StateHasChanged();
        return Task.CompletedTask;
    }



}