@attribute [Authorize]
@page "/Suport"
@using GetWatch.Pages.Layout
@using System.Security.Claims
@using GetWatch.Services.Tickets
@using GetWatch.Services.Db
@using GetWatch.Services
@using GetWatch.Interfaces.SupportTickets
@using GetWatch.Interfaces.Db

@inject NavigationManager NavigationManager
@inject IUnitOfWork UnitOfWork
@inject ISupportTicketMapper SupportTicketMapper
@inject IRepositoryFactory RepositoryFactory
@inject GetWatchContext Context
@inject CustomAuthenticationStateProvider AuthenticationStateProvider 


@layout SuportPageLayout
<NavBar/>
<form class="contact-form" @onsubmit="HandleSubmit">
        <div class="form-row">
          <div class="input-group">
            <label class="form-label">First Name</label>
            <div class="input-wrapper">
              <input
                type="text"
                placeholder="Enter First Name"
                class="form-input"
                @bind="firstName"
              />
            </div>
          </div>
          <div class="input-group">
            <label class="form-label">Last Name</label>
            <div class="input-wrapper">
              <input
                type="text"
                placeholder="Enter Last Name"
                class="form-input"
                @bind="lastName"
              />
            </div>
          </div>
        </div>
      
        <div class="form-row">
          <div class="input-group">
            <label class="form-label">Email</label>
            <div class="input-wrapper">
              <input
                type="email"
                placeholder="Enter your Email"
                class="form-input"
                @bind="email"
              />
            </div>
          </div>
          <div class="input-group">
            <label class="form-label">Phone Number</label>
            <div class="phone-input-group">
              <div class="input-wrapper">
                <input
                  type="tel"
                  placeholder="Enter Phone Number"
                  class="form-input"
                  @bind="phoneNumber"
                />
              </div>
            </div>
          </div>
        </div>
      
        <div class="message-group">
          <label class="form-label">Message</label>
          <div class="textarea-wrapper">
            <textarea
              placeholder="Enter your Message"
              class="form-textarea"
              @bind="message"
            ></textarea>
          </div>
        </div>
      
        <div class="form-footer">
          <div class="terms-group">
            <div class="checkbox-wrapper">
              <input type="checkbox" @bind="agreeToTerms" />
            </div>
            <p class="terms-text">I agree with Terms of Use and Privacy Policy</p>
          </div>
          <button class="submit-button" type="submit">Send Message</button>
        </div>
        @if (!string.IsNullOrEmpty(feedbackMessage))
        {
            <p class="@((isError ? "error-message" : "success-message"))">@feedbackMessage</p>
        }
      </form> 
 <Faq/>    
<Footer/>

@code {
    private string firstName        = string.Empty;
    private string lastName         = string.Empty;
    private string email            = string.Empty;
    private string phoneNumber      = string.Empty;
    private string message          = string.Empty;
    private bool agreeToTerms       = false;
    private string feedbackMessage  = string.Empty;
    private bool isError            = false;
    
    private IRepository<DbUser>? UserRepository;
    private SupportTicketService? TicketService;

    protected override void OnInitialized()
    {
        TicketService = new SupportTicketService(Context, RepositoryFactory, UnitOfWork,SupportTicketMapper);
    }

    private async Task HandleSubmit()
    {
        if (!CheckErrors())
        {
            return;
        }

        try
        {
            var user = await GetAuthenticatedUserAsync();
            if (user == null)
            {
                SetError("Error: User not found in the database.");
                return;
            }
            Console.WriteLine($"User found: {user.Email}");

            await CreateSupportTicketAsync(user);
            SetSuccess("Support ticket submitted successfully!");
        }
        catch (Exception ex)
        {
            SetError($"An error occurred while submitting the ticket: {ex.Message}");
        }
    }

    private bool CheckErrors(){
        feedbackMessage = string.Empty;
        isError = false;

        if (string.IsNullOrWhiteSpace(firstName) ||
            string.IsNullOrWhiteSpace(lastName) ||
            string.IsNullOrWhiteSpace(email) ||
            string.IsNullOrWhiteSpace(message))
        {
            SetError("All fields are required.");
            return false;
        }

        if (!agreeToTerms)
        {
            SetError("You must agree to the terms and conditions.");
            return false;
        }
        return true;

      
    }
    private async Task<DbUser?> GetAuthenticatedUserAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.FindFirst(ClaimTypes.Email)?.Value;
        UserRepository = UnitOfWork.GetRepository<DbUser>();

        if (string.IsNullOrEmpty(userEmail))
        {
            SetError("Error: Could not retrieve user email from authentication claims.");
            return null;
        }
        var user = UserRepository.GetAll().FirstOrDefault(x => x.Email == userEmail);
        return user;
    }

    private async Task CreateSupportTicketAsync(DbUser user)
    {
        var supportTicket = new SupportTicket
        {
            Subject = $"Support Request from {firstName} {lastName} ({email})",
            Description = message,
            IsResolved = false
        };


        await TicketService.CreateSupportTicketAsync(supportTicket, user);
    }

    private void SetError(string message)
    {
        feedbackMessage = message;
        isError = true;
        StateHasChanged();
    }

    private void SetSuccess(string message)
    {
        feedbackMessage = message;
        isError = false;
        StateHasChanged();
    }
}
